- name: Install python packages
  ansible.builtin.pip:
    name:
      - kubernetes

- name: Setup operators
  ansible.builtin.include_tasks: operators.yaml

- name: Create Loki ObjectBucketClaim
  kubernetes.core.k8s:
    definition:
      apiVersion: objectbucket.io/v1alpha1
      kind: ObjectBucketClaim
      metadata:
        name: loki-obc
        namespace: openshift-logging
      spec:
        generateBucketName: loki-bucket
        storageClassName: openshift-storage.noobaa.io
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Get ObjectBucketClaim ConfigMap
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: loki-obc
    namespace: openshift-logging
  register: obc_cm
  until: obc_cm.resources | length | int == 1

- name: Get ObjectBucketClaim Secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: loki-obc
    namespace: openshift-logging
  register: obc_secret
  until: obc_secret.resources | length | int == 1

- name: Create Loki s3 secret
  kubernetes.core.k8s:
    template: Secret.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Gather storage class info
  kubernetes.core.k8s_info:
    api_version: storage.k8s.io/v1
    kind: StorageClass
  register: storage_classes
  until: storage_classes is not failed

- name: Get default storage class
  ansible.builtin.set_fact:
    default_storage: "{{ item.metadata.name }}"
  loop: "{{ storage_classes.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when:
    - ("annotations" in item["metadata"])
    - ("storageclass.kubernetes.io/is-default-class" in item["metadata"]["annotations"])
    - item["metadata"]["annotations"]["storageclass.kubernetes.io/is-default-class"] == "true"

- name: Create Loki Stack
  kubernetes.core.k8s:
    definition:
      apiVersion: loki.grafana.com/v1
      kind: LokiStack
      metadata:
        name: logging-loki
        namespace: openshift-logging
      spec:
        size: "{{ loki_size | default('1x.small') }}"
        storage:
          schemas:
            - version: v12
              effectiveDate: "2022-06-01"
          tls:
            caName: openshift-service-ca.crt
          secret:
            name: logging-loki-s3
            type: s3
        storageClassName: "{{ default_storage }}"
        tenants:
          mode: openshift-logging
        limits:
          global:
            ingestion:
              ingestionBurstSize: 40
              ingestionRate: 20
              maxGlobalStreamsPerTenant: 25000
    apply: true
    state: present
    wait: true
    wait_timeout: 1200
    wait_condition:
      type: Ready
      status: "True"
  register: k8s_result
  until: k8s_result is not failed

- name: Configure cluster logging
  when: local_logging | bool
  kubernetes.core.k8s:
    definition:
      apiVersion: logging.openshift.io/v1
      kind: ClusterLogging
      metadata:
        name: instance
        namespace: openshift-logging
      spec:
        logStore:
          type: lokistack
          lokistack:
            name: logging-loki
        collection:
          type: vector
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Enable audit log collection
  when:
    - local_logging | bool
    - auditing | bool
  kubernetes.core.k8s:
    definition:
      apiVersion: logging.openshift.io/v1
      kind: ClusterLogForwarder
      metadata:
        name: instance
        namespace: openshift-logging
      spec:
        pipelines:
          - name: all-to-default
            inputRefs:
              - infrastructure
              - application
              - audit
            outputRefs:
              - default
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Setup console plugin
  when: local_logging | bool
  ansible.builtin.include_tasks: console.yaml
