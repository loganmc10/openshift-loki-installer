- name: Install Logging operator # noqa role-name[path]
  ansible.builtin.include_role:
    name: "{{ playbook_dir }}/openshift-edge-installer/common/roles/install_operator"
  vars:
    operator_name: cluster-logging
    operator_namespace: openshift-logging
    all_namespaces: false
    cluster_monitoring: true

- name: Install Loki operator # noqa role-name[path]
  ansible.builtin.include_role:
    name: "{{ playbook_dir }}/openshift-edge-installer/common/roles/install_operator"
  vars:
    operator_name: loki-operator
    operator_namespace: openshift-operators-redhat
    all_namespaces: true
    cluster_monitoring: true

- name: Get NooBaa tls cert
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: noobaa-s3-serving-cert
    namespace: openshift-storage
  register: noobaa_s3_cert
  until: noobaa_s3_cert is not failed

- name: Create Loki s3 cert
  kubernetes.core.k8s:
    template: ConfigMap.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Create Loki ObjectBucketClaim
  kubernetes.core.k8s:
    definition:
      apiVersion: objectbucket.io/v1alpha1
      kind: ObjectBucketClaim
      metadata:
        name: loki-obc
        namespace: openshift-logging
      spec:
        generateBucketName: loki-bucket
        storageClassName: openshift-storage.noobaa.io
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Get ObjectBucketClaim ConfigMap
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: loki-obc
    namespace: openshift-logging
  register: obc_cm
  until: obc_cm is not failed

- name: Get ObjectBucketClaim Secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: loki-obc
    namespace: openshift-logging
  register: obc_secret
  until: obc_secret is not failed

- name: Create Loki s3 secret
  kubernetes.core.k8s:
    template: Secret.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Gather storage class info
  kubernetes.core.k8s_info:
    api_version: storage.k8s.io/v1
    kind: StorageClass
  register: storage_classes
  until: storage_classes is not failed

- name: Get default storage class
  ansible.builtin.set_fact:
    default_storage: "{{ item.metadata.name }}"
  loop: "{{ storage_classes.resources }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  when: >
    (("annotations" in item["metadata"]) and
    ("storageclass.kubernetes.io/is-default-class" in item["metadata"]["annotations"]) and
    (item["metadata"]["annotations"]["storageclass.kubernetes.io/is-default-class"] == "true"))

- name: Create Loki Stack
  kubernetes.core.k8s:
    definition:
      apiVersion: loki.grafana.com/v1
      kind: LokiStack
      metadata:
        name: logging-loki
        namespace: openshift-logging
      spec:
        size: 1x.small
        storage:
          schemas:
            - version: v12
              effectiveDate: "2022-06-01"
          tls:
            caName: loki-s3-cert
          secret:
            name: logging-loki-s3
            type: s3
        storageClassName: "{{ default_storage }}"
        tenants:
          mode: openshift-logging
        limits:
          global:
            ingestion:
              ingestionBurstSize: 40
              ingestionRate: 20
              maxGlobalStreamsPerTenant: 25000
    apply: true
    state: present
    wait: true
    wait_timeout: 1200
    wait_condition:
      type: Ready
      status: "True"
  register: k8s_result
  until: k8s_result is not failed

- name: Configure cluster logging
  kubernetes.core.k8s:
    definition:
      apiVersion: logging.openshift.io/v1
      kind: ClusterLogging
      metadata:
        name: instance
        namespace: openshift-logging
      spec:
        logStore:
          type: lokistack
          lokistack:
            name: logging-loki
        collection:
          type: vector
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Get Console plugin list
  kubernetes.core.k8s_info:
    api_version: operator.openshift.io/v1
    kind: Console
    name: cluster
  register: openshift_console
  until: openshift_console is not failed

- name: Append logging to console plugins list
  when: (openshift_console.resources[0].spec.plugins is defined) and ("logging-view-plugin" not in openshift_console.resources[0].spec.plugins)
  kubernetes.core.k8s_json_patch:
    api_version: operator.openshift.io/v1
    kind: Console
    name: cluster
    patch:
      - op: add
        path: /spec/plugins/-
        value: logging-view-plugin
  register: k8s_result
  until: k8s_result is not failed

- name: Create console plugin list and add logging
  when: openshift_console.resources[0].spec.plugins is not defined
  kubernetes.core.k8s:
    definition:
      apiVersion: operator.openshift.io/v1
      kind: Console
      metadata:
        name: cluster
      spec:
        plugins:
          - logging-view-plugin
    state: present
  register: k8s_result
  until: k8s_result is not failed
